openapi: 3.0.3
info:
  title: Help Desk API
  version: 1.0.0
  description: API specification for the Help Desk Flutter app
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging.api.example.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development server
tags:
  - name: Auth
    description: Authentication operations
  - name: Tickets
    description: Ticket management operations
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [username, password]
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
    RefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required: [refresh_token]
    UserProfile:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        roles:
          type: string
    Reply:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        author:
          type: string
        created_at:
          type: string
          format: date-time
    Ticket:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Reply'
    TicketList:
      type: array
      items:
        $ref: '#/components/schemas/Ticket'
paths:
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Auth tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/refresh:
    post:
      summary: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: New auth tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/me:
    get:
      summary: Get current user info
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /auth/fcm:
    post:
      summary: Register device FCM token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fcm_token:
                  type: string
              required: [fcm_token]
      responses:
        '200':
          description: Success
  /tickets:
    get:
      summary: List tickets
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketList'
  /tickets/create:
    post:
      summary: Create new ticket
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                category:
                  type: string
                facility:
                  type: string
              required: [title, description]
      responses:
        '201':
          description: Created ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /tickets/{ticketId}:
    get:
      summary: Get ticket details
      security:
        - BearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
    patch:
      summary: Update ticket info
      security:
        - BearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Updated ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /tickets/{ticketId}/reply:
    post:
      summary: Post reply to ticket
      security:
        - BearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
              required: [message]
      responses:
        '201':
          description: Created reply
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /tickets/{ticketId}/solution:
    patch:
      summary: Update ticket solution
      security:
        - BearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                solution:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Updated ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
security:
  - BearerAuth: []
